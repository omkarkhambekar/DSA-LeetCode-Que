We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= dislikes.length <= 104
dislikes[i].length == 2
1 <= dislikes[i][j] <= n
ai < bi
All the pairs of dislikes are unique.

Solution: -----------------------------------------------------

class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        ArrayList<Integer>[] g = AdjList(dislikes,n);
        int[]visited = new int[n+1];
        for(int i=0; i<n; i++){
            if(visited[i]==0){
                if(BFS(g,visited,i)==0){
                    return false;
                }
            }
        }
        return true;
    }
    public int BFS(ArrayList<Integer>[] g, int[]visited, int n){
        Queue<Integer>q = new LinkedList<>();
        visited[n] = 1;
        q.add(n);
        while(!q.isEmpty()){
            int front = q.remove();
            int firstCol = visited[front];
            for(int i=0;i<g[front].size(); i++){
                int neighbourOfFront = g[front].get(i);
                int neighbourColor = visited[neighbourOfFront];
                if(visited[neighbourOfFront]==0){
                    if(firstCol==1){
                        visited[neighbourOfFront]=2;
                    }
                    else{
                        visited[neighbourOfFront]=1;
                    }
                    q.add(neighbourOfFront);
                }
                if(firstCol == neighbourColor){
                    return 0;
                }
            }
        }
        return 1;
    }
    public ArrayList<Integer>[] AdjList(int[][] A, int B){
        ArrayList<Integer>[]graph = new ArrayList[B+1];

        for(int i=0; i<graph.length; i++){
            graph[i] = new ArrayList<Integer>();
        }
        for(int[] edge: A){
            int u = edge[0];
            int v = edge[1];
            graph[u].add(v);
            graph[v].add(u);
        }
        return graph;
    }
}






